#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
from datetime import datetime
import pandas as pd
import googlemaps
from dotenv import load_dotenv

# Load environment variables from the .env file
BASE_DIR = os.path.abspath("..")  # Project directory
ENV_PATH = os.path.join(BASE_DIR, ".env")  # Path to the .env file
load_dotenv(dotenv_path=ENV_PATH)

# Define the path for processed file and output for reviews
PATH = os.path.join(BASE_DIR, "data/processed/places_processed.csv")
OUTPUT_PATH = os.path.join(BASE_DIR, "data/raw/reviews_raw.csv")

def get_google_maps_client():
    """
    Initializes and returns the Google Maps API client.

    Returns:
        googlemaps.Client: An instance of the Google Maps API client.

    Raises:
        ValueError: If the API key is not found in the environment variables.
        Exception: If there is an issue initializing the Google Maps client.
    """
    API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")
    if not API_KEY:
        raise ValueError("API key not found. Check your .env file.")
    try:
        client = googlemaps.Client(key=API_KEY)
        return client
    except Exception as e:
        print(f"Error initializing Google Maps Client: {e}")
        return None

def load_place_ids(filename=PATH):
    """
    Loads the Place IDs and names from the CSV file generated by fetch_places.py.

    Args:
        filename (str): Path to the CSV file (default is PATH).

    Returns:
        list: A list of dictionaries, each containing "Place ID" and "Name" keys.
    """
    # Specify the correct separator if the CSV was saved with a semicolon.
    df_places = pd.read_csv(filename, sep=';')
    return df_places[["Place ID", "Name"]].to_dict(orient="records")

def fetch_reviews(place_id, place_name, gmaps):
    """
    Fetches the reviews of a place using the Place ID.

    Args:
        place_id (str): The Place ID of the place.
        place_name (str): The name of the place.
        gmaps (googlemaps.Client): Instance of the Google Maps API client.

    Returns:
        list: A list of dictionaries, each containing review details for the place.
    """
    try:
        details = gmaps.place(place_id=place_id, fields=["reviews"])
        reviews = details.get("result", {}).get("reviews", [])
        
        return [
            {
                "Place ID": place_id,
                "Place Name": place_name,
                "Review ID": f"{review.get('author_name')}_{review.get('time')}",  # Unique review ID
                "Author": review.get("author_name"),
                "Rating": review.get("rating"),
                "Text": review.get("text"),
                "Time": review.get("time"),
                # Convert the timestamp to formatted date (YYYY-MM-DD HH:MM:SS)
                "Date": datetime.fromtimestamp(review.get("time")).strftime('%Y-%m-%d %H:%M:%S') if review.get("time") else None,
                "Response": review.get("original_language")  # Optional field: business response if available
            }
            for review in reviews
        ]
    
    except Exception as e:
        print(f"Error fetching reviews for {place_id}: {e}")
        return []

def fetch_all_reviews(place_ids, gmaps, output_file=OUTPUT_PATH):
    """
    Loop to fetch reviews for all places and save the results to a CSV file.

    Args:
        place_ids (list): List of dictionaries containing Place IDs and names.
        gmaps (googlemaps.Client): Instance of the Google Maps API client.
        output_file (str): Path to the output CSV file where the reviews will be saved (default is OUTPUT_PATH).
    
    Saves:
        None: Saves the reviews data to the specified CSV file.
    """
    all_reviews = []
    
    for place in place_ids:
        print(f"Fetching reviews for {place['Name']}...")
        reviews = fetch_reviews(place["Place ID"], place["Name"], gmaps)
        
        if reviews:
            all_reviews.extend(reviews)
        
        time.sleep(2)  # Pause to avoid exceeding API rate limits
    
    # Create DataFrame and save the results to a CSV file
    if all_reviews:
        df_reviews = pd.DataFrame(all_reviews)
        df_reviews.to_csv(output_file, sep=';', index=False, encoding="utf-8")
        print(f"Reviews saved to {output_file}")
    else:
        print("No reviews found.")

# Main execution block
if __name__ == "__main__":
    gmaps = get_google_maps_client()
    place_ids = load_place_ids()
    fetch_all_reviews(place_ids, gmaps)
